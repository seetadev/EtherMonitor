{
    "BLOCKPLUGINS": {
        "power": "const simpleOneArgBlock = function (name, label, defaultValue) {    if (label === undefined) { var label = name; }    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.oneArgMathBlock();    if (defaultValue === undefined) {        block.defaults.push(1.0);    } else {        block.defaults.push(defaultValue);    }};const simpleTwoArgBlock = function (name, labels, defaultValues) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    for (let i = 0; i < labels.length; i++) {        block.staticLabels.push(labels[i]);    }    block.adjustWidthToLabel();    block.twoArgMathBlock();    for (let i = 0; i < defaultValues.length; i++) {        block.defaults.push(defaultValues[i]);    }};const staticBlock = function (name, label) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};simpleTwoArgBlock('power', [_('power'), _('base'), _('exp')], [10, 2]);",
        "sin": "const simpleOneArgBlock = function (name, label, defaultValue) {    if (label === undefined) { var label = name; }    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.oneArgMathBlock();    if (defaultValue === undefined) {        block.defaults.push(1.0);    } else {        block.defaults.push(defaultValue);    }};const simpleTwoArgBlock = function (name, labels, defaultValues) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    for (let i = 0; i < labels.length; i++) {        block.staticLabels.push(labels[i]);    }    block.adjustWidthToLabel();    block.twoArgMathBlock();    for (let i = 0; i < defaultValues.length; i++) {        block.defaults.push(defaultValues[i]);    }};const staticBlock = function (name, label) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};simpleOneArgBlock('sin', 'sin', '3.14159');",
        "cos": "const simpleOneArgBlock = function (name, label, defaultValue) {    if (label === undefined) { var label = name; }    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.oneArgMathBlock();    if (defaultValue === undefined) {        block.defaults.push(1.0);    } else {        block.defaults.push(defaultValue);    }};const simpleTwoArgBlock = function (name, labels, defaultValues) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    for (let i = 0; i < labels.length; i++) {        block.staticLabels.push(labels[i]);    }    block.adjustWidthToLabel();    block.twoArgMathBlock();    for (let i = 0; i < defaultValues.length; i++) {        block.defaults.push(defaultValues[i]);    }};const staticBlock = function (name, label) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};simpleOneArgBlock('cos', 'cos', '3.14159');",
        "tan": "const simpleOneArgBlock = function (name, label, defaultValue) {    if (label === undefined) { var label = name; }    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.oneArgMathBlock();    if (defaultValue === undefined) {        block.defaults.push(1.0);    } else {        block.defaults.push(defaultValue);    }};const simpleTwoArgBlock = function (name, labels, defaultValues) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    for (let i = 0; i < labels.length; i++) {        block.staticLabels.push(labels[i]);    }    block.adjustWidthToLabel();    block.twoArgMathBlock();    for (let i = 0; i < defaultValues.length; i++) {        block.defaults.push(defaultValues[i]);    }};const staticBlock = function (name, label) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};simpleOneArgBlock('tan', 'tan', '3.14159');",
        "asin": "const simpleOneArgBlock = function (name, label, defaultValue) {    if (label === undefined) { var label = name; }    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.oneArgMathBlock();    if (defaultValue === undefined) {        block.defaults.push(1.0);    } else {        block.defaults.push(defaultValue);    }};const simpleTwoArgBlock = function (name, labels, defaultValues) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    for (let i = 0; i < labels.length; i++) {        block.staticLabels.push(labels[i]);    }    block.adjustWidthToLabel();    block.twoArgMathBlock();    for (let i = 0; i < defaultValues.length; i++) {        block.defaults.push(defaultValues[i]);    }};const staticBlock = function (name, label) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};simpleOneArgBlock('asin', 'asin', 0);",
        "acos": "const simpleOneArgBlock = function (name, label, defaultValue) {    if (label === undefined) { var label = name; }    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.oneArgMathBlock();    if (defaultValue === undefined) {        block.defaults.push(1.0);    } else {        block.defaults.push(defaultValue);    }};const simpleTwoArgBlock = function (name, labels, defaultValues) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    for (let i = 0; i < labels.length; i++) {        block.staticLabels.push(labels[i]);    }    block.adjustWidthToLabel();    block.twoArgMathBlock();    for (let i = 0; i < defaultValues.length; i++) {        block.defaults.push(defaultValues[i]);    }};const staticBlock = function (name, label) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};simpleOneArgBlock('acos', 'acos', 0);",
        "atan": "const simpleOneArgBlock = function (name, label, defaultValue) {    if (label === undefined) { var label = name; }    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.oneArgMathBlock();    if (defaultValue === undefined) {        block.defaults.push(1.0);    } else {        block.defaults.push(defaultValue);    }};const simpleTwoArgBlock = function (name, labels, defaultValues) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    for (let i = 0; i < labels.length; i++) {        block.staticLabels.push(labels[i]);    }    block.adjustWidthToLabel();    block.twoArgMathBlock();    for (let i = 0; i < defaultValues.length; i++) {        block.defaults.push(defaultValues[i]);    }};const staticBlock = function (name, label) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};simpleOneArgBlock('atan', 'atan', 1);",
        "floor": "const simpleOneArgBlock = function (name, label, defaultValue) {    if (label === undefined) { var label = name; }    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.oneArgMathBlock();    if (defaultValue === undefined) {        block.defaults.push(1.0);    } else {        block.defaults.push(defaultValue);    }};const simpleTwoArgBlock = function (name, labels, defaultValues) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    for (let i = 0; i < labels.length; i++) {        block.staticLabels.push(labels[i]);    }    block.adjustWidthToLabel();    block.twoArgMathBlock();    for (let i = 0; i < defaultValues.length; i++) {        block.defaults.push(defaultValues[i]);    }};const staticBlock = function (name, label) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};simpleOneArgBlock('floor', _('floor'), 0.5);",
        "ceiling": "const simpleOneArgBlock = function (name, label, defaultValue) {    if (label === undefined) { var label = name; }    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.oneArgMathBlock();    if (defaultValue === undefined) {        block.defaults.push(1.0);    } else {        block.defaults.push(defaultValue);    }};const simpleTwoArgBlock = function (name, labels, defaultValues) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    for (let i = 0; i < labels.length; i++) {        block.staticLabels.push(labels[i]);    }    block.adjustWidthToLabel();    block.twoArgMathBlock();    for (let i = 0; i < defaultValues.length; i++) {        block.defaults.push(defaultValues[i]);    }};const staticBlock = function (name, label) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};simpleOneArgBlock('ceiling', _('ceiling'), 0.5);",
        "degrees": "const simpleOneArgBlock = function (name, label, defaultValue) {    if (label === undefined) { var label = name; }    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.oneArgMathBlock();    if (defaultValue === undefined) {        block.defaults.push(1.0);    } else {        block.defaults.push(defaultValue);    }};const simpleTwoArgBlock = function (name, labels, defaultValues) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    for (let i = 0; i < labels.length; i++) {        block.staticLabels.push(labels[i]);    }    block.adjustWidthToLabel();    block.twoArgMathBlock();    for (let i = 0; i < defaultValues.length; i++) {        block.defaults.push(defaultValues[i]);    }};const staticBlock = function (name, label) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};simpleOneArgBlock('degrees', _('to degrees'), 3.14159);",
        "radians": "const simpleOneArgBlock = function (name, label, defaultValue) {    if (label === undefined) { var label = name; }    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.oneArgMathBlock();    if (defaultValue === undefined) {        block.defaults.push(1.0);    } else {        block.defaults.push(defaultValue);    }};const simpleTwoArgBlock = function (name, labels, defaultValues) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    for (let i = 0; i < labels.length; i++) {        block.staticLabels.push(labels[i]);    }    block.adjustWidthToLabel();    block.twoArgMathBlock();    for (let i = 0; i < defaultValues.length; i++) {        block.defaults.push(defaultValues[i]);    }};const staticBlock = function (name, label) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};simpleOneArgBlock('radians', _('to radians'), 180);",
        "pi": "const simpleOneArgBlock = function (name, label, defaultValue) {    if (label === undefined) { var label = name; }    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.oneArgMathBlock();    if (defaultValue === undefined) {        block.defaults.push(1.0);    } else {        block.defaults.push(defaultValue);    }};const simpleTwoArgBlock = function (name, labels, defaultValues) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    for (let i = 0; i < labels.length; i++) {        block.staticLabels.push(labels[i]);    }    block.adjustWidthToLabel();    block.twoArgMathBlock();    for (let i = 0; i < defaultValues.length; i++) {        block.defaults.push(defaultValues[i]);    }};const staticBlock = function (name, label) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};staticBlock('pi', '\u03c0');",
        "e": "const simpleOneArgBlock = function (name, label, defaultValue) {    if (label === undefined) { var label = name; }    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.oneArgMathBlock();    if (defaultValue === undefined) {        block.defaults.push(1.0);    } else {        block.defaults.push(defaultValue);    }};const simpleTwoArgBlock = function (name, labels, defaultValues) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    for (let i = 0; i < labels.length; i++) {        block.staticLabels.push(labels[i]);    }    block.adjustWidthToLabel();    block.twoArgMathBlock();    for (let i = 0; i < defaultValues.length; i++) {        block.defaults.push(defaultValues[i]);    }};const staticBlock = function (name, label) {    const block = new ProtoBlock(name);    block.palette = globalActivity.palettes.dict['maths'];    globalActivity.blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};staticBlock('e', 'e');"
    },
    "ARGPLUGINS": {
        "power": "const mathBlock = globalActivity.logo.blockList[blk];const conns = mathBlock.connections;var base = logo.parseArg(logo, turtle, conns[1]);var exp  = logo.parseArg(logo, turtle, conns[2]);mathBlock.value = Math.pow(base, exp);",
        "sin": "const mathBlock = globalActivity.logo.blockList[blk];const conns = mathBlock.connections;mathBlock.value = Math.sin(logo.parseArg(logo, turtle, conns[1]));",
        "cos": "const mathBlock = globalActivity.logo.blockList[blk];const conns = mathBlock.connections;mathBlock.value = Math.cos(logo.parseArg(logo, turtle, conns[1]));",
        "tan": "const mathBlock = globalActivity.logo.blockList[blk];const conns = mathBlock.connections;mathBlock.value = Math.tan(logo.parseArg(logo, turtle, conns[1]));",
        "asin": "const mathBlock = globalActivity.logo.blockList[blk];const conns = mathBlock.connections;mathBlock.value = Math.asin(logo.parseArg(logo, turtle, conns[1]));",
        "acos": "const mathBlock = globalActivity.logo.blockList[blk];const conns = mathBlock.connections;mathBlock.value = Math.acos(logo.parseArg(logo, turtle, conns[1]));",
        "atan": "const mathBlock = globalActivity.logo.blockList[blk];const conns = mathBlock.connections;mathBlock.value = Math.atan(logo.parseArg(logo, turtle, conns[1]));",
        "floor": "const mathBlock = globalActivity.logo.blockList[blk];const conns = mathBlock.connections;mathBlock.value = Math.floor(logo.parseArg(logo, turtle, conns[1]));",
        "ceiling": "const mathBlock = globalActivity.logo.blockList[blk];const conns = mathBlock.connections;mathBlock.value = Math.ceil(logo.parseArg(logo, turtle, conns[1]));",
        "degrees": "const mathBlock = globalActivity.logo.blockList[blk];const conns = mathBlock.connections;mathBlock.value = logo.parseArg(logo, turtle, conns[1]) * (180/Math.PI);",
        "radians": "const mathBlock = globalActivity.logo.blockList[blk];const conns = mathBlock.connections;mathBlock.value = logo.parseArg(logo, turtle, conns[1]) * (Math.PI/180);",
        "pi": "const mathBlock = globalActivity.logo.blockList[blk];const conns = mathBlock.connections;mathBlock.value = Math.PI;",
        "e": "const mathBlock = globalActivity.logo.blockList[blk];const conns = mathBlock.connections;mathBlock.value = Math.E;"
    },
    "PALETTEPLUGINS": {
        "maths": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   version=\"1.1\"   width=\"55\"   height=\"55\"   viewBox=\"0 0 55 55\"   id=\"svg2\"   xml:space=\"preserve\"><metadata     id=\"metadata13\"><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /><dc:title></dc:title></cc:Work></rdf:RDF></metadata><defs     id=\"defs11\" /><g     id=\"toolbar-trigonometry\"     style=\"fill:#000000;display:block\"><path       d=\"m 11.852704,38.123539 31.294591,0 -31.294591,-26.247077 z\"       id=\"path5\"       style=\"fill:none;stroke:#FF6EA1;stroke-width:3.53326035\" /><path       d=\"m 11.852704,30.047514 8.076024,0 0,8.076025\"       id=\"path7\"       style=\"fill:none;stroke:#FF6EA1;stroke-width:1.51425433\" /></g></svg>"
    },
    "PALETTEFILLCOLORS": {
        "maths": "#FF6EA1"
    },
    "PALETTESTROKECOLORS": {
        "maths": "#FF2C76"
    },
    "PALETTEHIGHLIGHTCOLORS": {
        "maths": "#FF5293"
    },
    "HIGHLIGHTSTROKECOLORS": {
        "maths": "#FFCDDF"
    }
}